name: CI-CD to ECS

on:
  push:
    branches: ["main"] # mainブランチへのpushをトリガーに設定する例

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. コードをチェックアウト
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. AWSへのログイン (公式の ECR ログイン用 GitHub Action)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::990606419933:role/github_actions_role
          aws-region: "ap-northeast-1" # 東京リージョンを直接指定

      # 3. ECRプッシュに必要なログイン
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # # 4. Dockerイメージビルド
      # - name: Build Docker image
      #   run: |
      #     docker compose --file docker/docker-compose.prod.yml --env-file docker/env/.env.prod build --no-cache
      #     docker tag go/go_4_vocab_keep:latest 990606419933.dkr.ecr.ap-northeast-1.amazonaws.com/go/go_4_vocab_keep:latest

      # # 5. ECR へ push
      # - name: Push to Amazon ECR
      #   run: |
      #     docker push 990606419933.dkr.ecr.ap-northeast-1.amazonaws.com/go/go_4_vocab_keep:latest

      # # 3. Dockerイメージをビルド & ECRプッシュに必要なログイン
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: go/go_4_vocab_keep
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -x  # 以降のコマンドと展開された変数を出力
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          docker compose --file docker/docker-compose.prod.yml --env-file docker/env/.env.prod build --no-cache
          docker tag go/go_4_vocab_keep:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # migrate CLI をインストール
      - name: Install golang-migrate CLI
        run: |
          set -ex
          # 最新バージョンを取得するか、特定の安定バージョンを指定
          MIGRATE_VERSION=$(curl -s https://api.github.com/repos/golang-migrate/migrate/releases/latest | grep tag_name | cut -d '"' -f 4)
          echo "Downloading migrate version: $MIGRATE_VERSION"
          curl -L https://github.com/golang-migrate/migrate/releases/download/$MIGRATE_VERSION/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/migrate
          migrate -version

      # Secrets ManagerからDB接続URLを取得
      - name: Get DB Connection URL from AWS Secrets Manager for Migration
        id: get_db_url_for_migration # このステップのID
        env:
          # GitHub SecretにSecrets ManagerのシークレットARNまたは名前を保存
          # 例: app/rds/prod/connection_details2 (Terraformで作成したシークレット名)
          # またはその完全なARN
          RDS_CONNECTION_SECRET_ID: "arn:aws:secretsmanager:ap-northeast-1:990606419933:secret:app/rds/prod/connection_details2-oF9Afj"
          # シークレット内のJSONキー (例: Terraformで設定した "db_url")
          SECRET_JSON_KEY_FOR_DB_URL: "db_url"
        run: |
          set -ex
          echo "Fetching DATABASE_URL from Secrets Manager: ${RDS_CONNECTION_SECRET_ID}..."
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id "${RDS_CONNECTION_SECRET_ID}" --query SecretString --output text)

          if [ -z "$SECRET_STRING" ]; then
            echo "Error: SecretString is empty for secret ${RDS_CONNECTION_SECRET_ID}."
            exit 1
          fi

          # jqを使ってJSONキーから値を抽出
          # ubuntu-latestランナーにはjqがプリインストールされている想定
          EXTRACTED_VALUE=$(echo "$SECRET_STRING" | jq -r ".${SECRET_JSON_KEY_FOR_DB_URL}")

          if [ "$EXTRACTED_VALUE" == "null" ] || [ -z "$EXTRACTED_VALUE" ]; then
            echo "Error: Key '${SECRET_JSON_KEY_FOR_DB_URL}' not found or value is null in secret ${RDS_CONNECTION_SECRET_ID}."
            exit 1
          fi
          echo "::set-output name=database_url::$EXTRACTED_VALUE"
          echo "DATABASE_URL fetched successfully."

      - name: Run Database Migrations (using CLI)
        env:
          # 前のステップで取得した値を環境変数として設定
          DATABASE_URL: ${{ steps.get_db_url_for_migration.outputs.database_url }}
          MIGRATIONS_PATH: ./db/migrations # あなたのマイグレーションファイルのパス
        run: |
          set -ex
          echo "Running database migrations using CLI..."
          if [ -z "${DATABASE_URL}" ]; then
            echo "Error: DATABASE_URL is empty. Migration cannot proceed."
            exit 1
          fi
          migrate -path ${MIGRATIONS_PATH} -database "${DATABASE_URL}" up
          echo "Database migrations complete."

      # 既存のタスク定義をDL
      - name: Download task definition
        run: |
          set -x
          aws ecs describe-task-definition --task-definition my-task-family --query taskDefinition > task-definition.json
          cat task-definition.json  # 内容を確認（※シークレット情報が含まれていないか注意）

      # タスク定義を更新
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ steps.build-image.outputs.image }}
          # secrets をJSON文字列として指定
          secrets: '[{"name": "APP_DATABASE_URL", "valueFrom": "arn:aws:secretsmanager:ap-northeast-1:***:secret:app/rds/prod/connection_details2-oF9Afj:db_url::AWSCURRENT"}]'
          # environment-variables をJSON文字列として指定
          environment-variables: '[{"name": "APP_SERVER_PORT", "value": ":8080"},{"name": "APP_LOG_LEVEL", "value": "error"},{"name": "APP_LOG_FORMAT", "value": "json"},{"name": "APP_APP_REVIEW_LIMIT", "value": "10"},{"name": "APP_AUTH_ENABLED", "value": "true"}]'

      # 6. タスク定義をECSへデプロイ (amazon-ecs-deploy-task-definition@v1)
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: myservice
          cluster: my-ecs-cluster
          wait-for-service-stability: true

      # # 6. タスク定義をECSへデプロイ (amazon-ecs-deploy-task-definition@v1)
      # - name: Deploy to ECS
      #   id: ecsdeploy
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     # ローカルにあるタスク定義テンプレートファイル
      #     task-definition: "taskdef.json"
      #     # ECSクラスター名
      #     cluster: "my-ecs-cluster"
      #     # デプロイ先のサービス名
      #     service: "my-ecs-service"
      #     # タスク定義内のコンテナ名 ("my-container"と一致させる)
      #     container-name: "my-container"
      #     # 置き換え先のコンテナイメージ ("<IMAGE_NAME>" をこれに置換)
      #     image: "${{ secrets.ECR_REPOSITORY }}:latest"
      #     # 強制デプロイしたい場合は true
      #     force-new-deployment: true
