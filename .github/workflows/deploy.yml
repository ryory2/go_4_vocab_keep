name: CI-CD to ECS

on:
  push:
    branches: ["main"] # mainブランチへのpushをトリガーに設定する例

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. コードをチェックアウト
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. AWSへのログイン (公式の ECR ログイン用 GitHub Action)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::990606419933:role/github_actions_role
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. ECRプッシュに必要なログイン
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # # 4. Dockerイメージビルド
      # - name: Build Docker image
      #   run: |
      #     docker compose --file docker/docker-compose.prod.yml --env-file docker/env/.env.prod build --no-cache
      #     docker tag test/go_1_test_repository:latest 990606419933.dkr.ecr.ap-northeast-1.amazonaws.com/test/go_1_test_repository:latest

      # # 5. ECR へ push
      # - name: Push to Amazon ECR
      #   run: |
      #     docker push 990606419933.dkr.ecr.ap-northeast-1.amazonaws.com/test/go_1_test_repository:latest

      # # 3. Dockerイメージをビルド & ECRプッシュに必要なログイン
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test/go_1_test_repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -x  # 以降のコマンドと展開された変数を出力
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          docker compose --file docker/docker-compose.prod.yml --env-file docker/env/.env.prod build --no-cache
          docker tag test/go_1_test_repository:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 既存のタスク定義をDL
      - name: Download task definition
        run: |
          set -x
          aws ecs describe-task-definition --task-definition my-task-family --query taskDefinition > task-definition.json
          cat task-definition.json  # 内容を確認（※シークレット情報が含まれていないか注意）

      # タスク定義を更新
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ steps.build-image.outputs.image }}

      # 6. タスク定義をECSへデプロイ (amazon-ecs-deploy-task-definition@v1)
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: myservice
          cluster: my-ecs-cluster
          wait-for-service-stability: true

      # # 6. タスク定義をECSへデプロイ (amazon-ecs-deploy-task-definition@v1)
      # - name: Deploy to ECS
      #   id: ecsdeploy
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     # ローカルにあるタスク定義テンプレートファイル
      #     task-definition: "taskdef.json"
      #     # ECSクラスター名
      #     cluster: "my-ecs-cluster"
      #     # デプロイ先のサービス名
      #     service: "my-ecs-service"
      #     # タスク定義内のコンテナ名 ("my-container"と一致させる)
      #     container-name: "my-container"
      #     # 置き換え先のコンテナイメージ ("<IMAGE_NAME>" をこれに置換)
      #     image: "${{ secrets.ECR_REPOSITORY }}:latest"
      #     # 強制デプロイしたい場合は true
      #     force-new-deployment: true
