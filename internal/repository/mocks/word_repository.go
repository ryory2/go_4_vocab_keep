// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "go_4_vocab_keep/internal/model"

	uuid "github.com/google/uuid"
)

// WordRepository is an autogenerated mock type for the WordRepository type
type WordRepository struct {
	mock.Mock
}

// CheckTermExists provides a mock function with given fields: ctx, db, tenantID, term, excludeWordID
func (_m *WordRepository) CheckTermExists(ctx context.Context, db *gorm.DB, tenantID uuid.UUID, term string, excludeWordID *uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, db, tenantID, term, excludeWordID)

	if len(ret) == 0 {
		panic("no return value specified for CheckTermExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, string, *uuid.UUID) (bool, error)); ok {
		return rf(ctx, db, tenantID, term, excludeWordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, string, *uuid.UUID) bool); ok {
		r0 = rf(ctx, db, tenantID, term, excludeWordID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, db, tenantID, term, excludeWordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, tx, word
func (_m *WordRepository) Create(ctx context.Context, tx *gorm.DB, word *model.Word) error {
	ret := _m.Called(ctx, tx, word)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.Word) error); ok {
		r0 = rf(ctx, tx, word)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tx, tenantID, wordID
func (_m *WordRepository) Delete(ctx context.Context, tx *gorm.DB, tenantID uuid.UUID, wordID uuid.UUID) error {
	ret := _m.Called(ctx, tx, tenantID, wordID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, tenantID, wordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, db, tenantID, wordID
func (_m *WordRepository) FindByID(ctx context.Context, db *gorm.DB, tenantID uuid.UUID, wordID uuid.UUID) (*model.Word, error) {
	ret := _m.Called(ctx, db, tenantID, wordID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Word
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) (*model.Word, error)); ok {
		return rf(ctx, db, tenantID, wordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) *model.Word); ok {
		r0 = rf(ctx, db, tenantID, wordID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Word)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, db, tenantID, wordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTenant provides a mock function with given fields: ctx, db, tenantID
func (_m *WordRepository) FindByTenant(ctx context.Context, db *gorm.DB, tenantID uuid.UUID) ([]*model.Word, error) {
	ret := _m.Called(ctx, db, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for FindByTenant")
	}

	var r0 []*model.Word
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID) ([]*model.Word, error)); ok {
		return rf(ctx, db, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID) []*model.Word); ok {
		r0 = rf(ctx, db, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Word)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID) error); ok {
		r1 = rf(ctx, db, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, tenantID, wordID, updates
func (_m *WordRepository) Update(ctx context.Context, tx *gorm.DB, tenantID uuid.UUID, wordID uuid.UUID, updates map[string]interface{}) error {
	ret := _m.Called(ctx, tx, tenantID, wordID, updates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID, map[string]interface{}) error); ok {
		r0 = rf(ctx, tx, tenantID, wordID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWordRepository creates a new instance of WordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWordRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WordRepository {
	mock := &WordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
