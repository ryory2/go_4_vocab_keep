// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "go_4_vocab_keep/internal/model"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// CreatePasswordResetToken provides a mock function with given fields: ctx, db, token
func (_m *TokenRepository) CreatePasswordResetToken(ctx context.Context, db *gorm.DB, token *model.PasswordResetToken) error {
	ret := _m.Called(ctx, db, token)

	if len(ret) == 0 {
		panic("no return value specified for CreatePasswordResetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.PasswordResetToken) error); ok {
		r0 = rf(ctx, db, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVerificationToken provides a mock function with given fields: ctx, db, token
func (_m *TokenRepository) CreateVerificationToken(ctx context.Context, db *gorm.DB, token *model.UserVerificationToken) error {
	ret := _m.Called(ctx, db, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerificationToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.UserVerificationToken) error); ok {
		r0 = rf(ctx, db, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePasswordResetToken provides a mock function with given fields: ctx, db, token
func (_m *TokenRepository) DeletePasswordResetToken(ctx context.Context, db *gorm.DB, token string) error {
	ret := _m.Called(ctx, db, token)

	if len(ret) == 0 {
		panic("no return value specified for DeletePasswordResetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, db, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVerificationToken provides a mock function with given fields: ctx, db, token
func (_m *TokenRepository) DeleteVerificationToken(ctx context.Context, db *gorm.DB, token string) error {
	ret := _m.Called(ctx, db, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerificationToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, db, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPasswordResetToken provides a mock function with given fields: ctx, db, token
func (_m *TokenRepository) FindPasswordResetToken(ctx context.Context, db *gorm.DB, token string) (*model.PasswordResetToken, error) {
	ret := _m.Called(ctx, db, token)

	if len(ret) == 0 {
		panic("no return value specified for FindPasswordResetToken")
	}

	var r0 *model.PasswordResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) (*model.PasswordResetToken, error)); ok {
		return rf(ctx, db, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) *model.PasswordResetToken); ok {
		r0 = rf(ctx, db, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PasswordResetToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, db, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVerificationToken provides a mock function with given fields: ctx, db, token
func (_m *TokenRepository) FindVerificationToken(ctx context.Context, db *gorm.DB, token string) (*model.UserVerificationToken, error) {
	ret := _m.Called(ctx, db, token)

	if len(ret) == 0 {
		panic("no return value specified for FindVerificationToken")
	}

	var r0 *model.UserVerificationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) (*model.UserVerificationToken, error)); ok {
		return rf(ctx, db, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) *model.UserVerificationToken); ok {
		r0 = rf(ctx, db, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserVerificationToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, db, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenRepository creates a new instance of TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepository {
	mock := &TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
