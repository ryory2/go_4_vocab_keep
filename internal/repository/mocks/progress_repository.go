// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "go_4_vocab_keep/internal/model"

	time "time"

	uuid "github.com/google/uuid"
)

// ProgressRepository is an autogenerated mock type for the ProgressRepository type
type ProgressRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, progress
func (_m *ProgressRepository) Create(ctx context.Context, tx *gorm.DB, progress *model.LearningProgress) error {
	ret := _m.Called(ctx, tx, progress)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.LearningProgress) error); ok {
		r0 = rf(ctx, tx, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByWordID provides a mock function with given fields: ctx, tx, tenantID, wordID
func (_m *ProgressRepository) DeleteByWordID(ctx context.Context, tx *gorm.DB, tenantID uuid.UUID, wordID uuid.UUID) error {
	ret := _m.Called(ctx, tx, tenantID, wordID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByWordID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, tenantID, wordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByWordID provides a mock function with given fields: ctx, db, tenantID, wordID
func (_m *ProgressRepository) FindByWordID(ctx context.Context, db *gorm.DB, tenantID uuid.UUID, wordID uuid.UUID) (*model.LearningProgress, error) {
	ret := _m.Called(ctx, db, tenantID, wordID)

	if len(ret) == 0 {
		panic("no return value specified for FindByWordID")
	}

	var r0 *model.LearningProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) (*model.LearningProgress, error)); ok {
		return rf(ctx, db, tenantID, wordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) *model.LearningProgress); ok {
		r0 = rf(ctx, db, tenantID, wordID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LearningProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, db, tenantID, wordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewableByTenant provides a mock function with given fields: ctx, db, tenantID, today, limit
func (_m *ProgressRepository) FindReviewableByTenant(ctx context.Context, db *gorm.DB, tenantID uuid.UUID, today time.Time, limit int) ([]*model.LearningProgress, error) {
	ret := _m.Called(ctx, db, tenantID, today, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindReviewableByTenant")
	}

	var r0 []*model.LearningProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, time.Time, int) ([]*model.LearningProgress, error)); ok {
		return rf(ctx, db, tenantID, today, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID, time.Time, int) []*model.LearningProgress); ok {
		r0 = rf(ctx, db, tenantID, today, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.LearningProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID, time.Time, int) error); ok {
		r1 = rf(ctx, db, tenantID, today, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, progress
func (_m *ProgressRepository) Update(ctx context.Context, tx *gorm.DB, progress *model.LearningProgress) error {
	ret := _m.Called(ctx, tx, progress)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.LearningProgress) error); ok {
		r0 = rf(ctx, tx, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProgressRepository creates a new instance of ProgressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProgressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProgressRepository {
	mock := &ProgressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
