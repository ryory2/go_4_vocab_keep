// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go_4_vocab_keep/internal/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ReviewService is an autogenerated mock type for the ReviewService type
type ReviewService struct {
	mock.Mock
}

// GetReviewWords provides a mock function with given fields: ctx, tenantID
func (_m *ReviewService) GetReviewWords(ctx context.Context, tenantID uuid.UUID) ([]*model.ReviewWordResponse, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewWords")
	}

	var r0 []*model.ReviewWordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.ReviewWordResponse, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.ReviewWordResponse); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ReviewWordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitReviewResult provides a mock function with given fields: ctx, tenantID, wordID, isCorrect
func (_m *ReviewService) SubmitReviewResult(ctx context.Context, tenantID uuid.UUID, wordID uuid.UUID, isCorrect bool) error {
	ret := _m.Called(ctx, tenantID, wordID, isCorrect)

	if len(ret) == 0 {
		panic("no return value specified for SubmitReviewResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, tenantID, wordID, isCorrect)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReviewService creates a new instance of ReviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewService {
	mock := &ReviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
